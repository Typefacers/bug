name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          node --experimental-transform-types \
            --loader ./png-loader.js \
            --experimental-test-coverage \
            --test-coverage-include=src/components/** \
            --test-coverage-include=src/routes/** \
            --test 2>&1 | tee coverage.txt

      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.txt

      - name: Comment coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.txt', 'utf8');
            const lines = coverage.split('\n');
            const start = lines.findIndex((l) => l.includes('# file'));
            const end = lines.findIndex((l) => l.includes('# end of coverage report'));
            let table;
            if (start !== -1 && end !== -1) {
              const header = lines[start].replace(/^#\s*/, '').trim();
              const headers = header.split('|').map((h) => h.trim()).filter(Boolean);
              const headRow = `| ${headers.join(' | ')} |`;
              const dividerRow = `| ${headers.map(() => '---').join(' | ')} |`;
              const rows = [];
              const stack = [];
              for (let i = start + 1; i < end; i++) {
                const line = lines[i];
                if (!line.startsWith('#') || line.includes('---')) continue;
                const content = line.replace(/^#/, '');
                const indentMatch = content.match(/^(\s*)/);
                const indent = indentMatch ? indentMatch[1].length : 0;
                const level = Math.max(0, indent - 1);
                const cells = content.trim().split('|').map((c) => c.trim());
                if (cells.length !== headers.length) continue;
                const name = cells[0];
                const isDir = cells.slice(1).every((c) => c === '');
                stack.length = level;
                if (isDir) {
                  stack.push(name);
                  cells[0] = stack.join('/') + '/';
                } else {
                  cells[0] = [...stack, name].join('/');
                }
                rows.push(`| ${cells.join(' | ')} |`);
              }
              table = [headRow, dividerRow, ...rows].join('\n');
            } else {
              table = `\`\`\`\n${coverage}\n\`\`\``;
            }
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.startsWith('## Test Coverage')
            );
            
            const body = `## Test Coverage\n\n${table}`;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
